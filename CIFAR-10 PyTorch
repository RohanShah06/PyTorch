{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMzTOrq4vvnynDFfKBERiJr",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "62a94a81c73840ef8a141e4b26305985": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d1e560007a204890913754e910d69559",
              "IPY_MODEL_c1f0854196e84a4f882938a8acd547b8",
              "IPY_MODEL_01b77c48da504286811b9433ece120f1"
            ],
            "layout": "IPY_MODEL_33b11815ca8944c88571b5c9872e72ea"
          }
        },
        "d1e560007a204890913754e910d69559": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b6370815421649cba3b4030f8763a790",
            "placeholder": "​",
            "style": "IPY_MODEL_fdc8164deb8c42148e0b432a6a904e65",
            "value": "100%"
          }
        },
        "c1f0854196e84a4f882938a8acd547b8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f4c33863c60749228d8ad6eee7034b0a",
            "max": 170498071,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_6f5e1c061ce14dae89b3f92288eb34d4",
            "value": 170498071
          }
        },
        "01b77c48da504286811b9433ece120f1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0f32bb3d36424fc1bd41efe1c8bf78f2",
            "placeholder": "​",
            "style": "IPY_MODEL_a9b6792fda5b46999bbefd05888c29bf",
            "value": " 170498071/170498071 [00:02&lt;00:00, 88542206.84it/s]"
          }
        },
        "33b11815ca8944c88571b5c9872e72ea": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b6370815421649cba3b4030f8763a790": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fdc8164deb8c42148e0b432a6a904e65": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f4c33863c60749228d8ad6eee7034b0a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6f5e1c061ce14dae89b3f92288eb34d4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "0f32bb3d36424fc1bd41efe1c8bf78f2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a9b6792fda5b46999bbefd05888c29bf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RohanShah06/PyTorch/blob/main/CIFAR-10%20PyTorch\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 103,
          "referenced_widgets": [
            "62a94a81c73840ef8a141e4b26305985",
            "d1e560007a204890913754e910d69559",
            "c1f0854196e84a4f882938a8acd547b8",
            "01b77c48da504286811b9433ece120f1",
            "33b11815ca8944c88571b5c9872e72ea",
            "b6370815421649cba3b4030f8763a790",
            "fdc8164deb8c42148e0b432a6a904e65",
            "f4c33863c60749228d8ad6eee7034b0a",
            "6f5e1c061ce14dae89b3f92288eb34d4",
            "0f32bb3d36424fc1bd41efe1c8bf78f2",
            "a9b6792fda5b46999bbefd05888c29bf"
          ]
        },
        "id": "tun71O7QSiFU",
        "outputId": "bc32f08d-0740-4a21-e1e2-f0523414e675"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to data/cifar-10-python.tar.gz\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/170498071 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "62a94a81c73840ef8a141e4b26305985"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting data/cifar-10-python.tar.gz to data\n",
            "Files already downloaded and verified\n"
          ]
        }
      ],
      "source": [
        "import torch\n",
        "from torch import nn\n",
        "from torch.utils.data import DataLoader\n",
        "from torchvision import datasets\n",
        "from torchvision.transforms import ToTensor\n",
        "\n",
        "training_data = datasets.CIFAR10(\n",
        "    root=\"data\",\n",
        "    train=True,\n",
        "    download=True,\n",
        "    transform=ToTensor(),\n",
        ")\n",
        "\n",
        "test_data = datasets.CIFAR10(\n",
        "    root=\"data\",\n",
        "    train=False,\n",
        "    download=True,\n",
        "    transform=ToTensor(),\n",
        ")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "batch_size = 30\n",
        "\n",
        "train_dataloader = DataLoader(training_data, batch_size=batch_size)\n",
        "test_dataloader = DataLoader(test_data, batch_size=batch_size)\n",
        "\n",
        "for X, y in test_dataloader:\n",
        "    print(f\"Shape of X [N, C, H, W]: {X.shape}\")\n",
        "    print(f\"Shape of y: {y.shape} {y.dtype}\")\n",
        "    break"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vR-XO6nVTptj",
        "outputId": "bfbb0651-0d27-4686-f249-be60ecca5977"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of X [N, C, H, W]: torch.Size([30, 3, 32, 32])\n",
            "Shape of y: torch.Size([30]) torch.int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
        "print(f\"Using {device} device\")\n",
        "\n",
        "class NeuralNetwork(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(NeuralNetwork, self).__init__()\n",
        "        self.flatten = nn.Flatten()\n",
        "        self.linear_relu_stack = nn.Sequential(\n",
        "            nn.Linear(3072, 1024),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(1024, 512),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(512, 10),\n",
        "           )\n",
        "            \n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.flatten(x)\n",
        "        logits = self.linear_relu_stack(x)\n",
        "        return logits\n",
        "\n",
        "model = NeuralNetwork().to(device)\n",
        "print(model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pucHfIsxTvfE",
        "outputId": "08f42cf0-0957-4971-a6d6-d3c7b85e150b"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using cuda device\n",
            "NeuralNetwork(\n",
            "  (flatten): Flatten(start_dim=1, end_dim=-1)\n",
            "  (linear_relu_stack): Sequential(\n",
            "    (0): Linear(in_features=3072, out_features=1024, bias=True)\n",
            "    (1): ReLU()\n",
            "    (2): Linear(in_features=1024, out_features=512, bias=True)\n",
            "    (3): ReLU()\n",
            "    (4): Linear(in_features=512, out_features=10, bias=True)\n",
            "  )\n",
            ")\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loss_fn = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.Adam(model.parameters(),lr=1e-3)"
      ],
      "metadata": {
        "id": "uskwrbMVU37-"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def train(dataloader, model, loss_fn, optimizer):\n",
        "    size = len(dataloader.dataset)\n",
        "    model.train()\n",
        "    for batch, (X, y) in enumerate(dataloader):\n",
        "        X, y = X.to(device), y.to(device)\n",
        "\n",
        "        pred = model(X)\n",
        "        loss = loss_fn(pred, y)\n",
        "\n",
        "\n",
        "        optimizer.zero_grad()\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        if batch % 100 == 0:\n",
        "            loss, current = loss.item(), batch * len(X)\n",
        "            print(f\"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]\")"
      ],
      "metadata": {
        "id": "GseH6LjVVBf0"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def test(dataloader, model, loss_fn):\n",
        "    size = len(dataloader.dataset)\n",
        "    num_batches = len(dataloader)\n",
        "    model.eval()\n",
        "    test_loss, correct = 0, 0\n",
        "    with torch.no_grad():\n",
        "        for X, y in dataloader:\n",
        "            X, y = X.to(device), y.to(device)\n",
        "            pred = model(X)\n",
        "            test_loss += loss_fn(pred, y).item()\n",
        "            correct += (pred.argmax(1) == y).type(torch.float).sum().item()\n",
        "    test_loss /= num_batches\n",
        "    correct /= size\n",
        "    print(f\"Test Error: \\n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \\n\")"
      ],
      "metadata": {
        "id": "xs7e4HnpWI8z"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = 5\n",
        "for t in range(epochs):\n",
        "    print(f\"Epoch {t+1}\\n-------------------------------\")\n",
        "    train(train_dataloader, model, loss_fn, optimizer)\n",
        "    test(test_dataloader, model, loss_fn)\n",
        "print(\"Done!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-dOS33EBWPJY",
        "outputId": "15019718-2d8a-409d-b0c7-e53c16861c10"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1\n",
            "-------------------------------\n",
            "loss: 2.315169  [    0/50000]\n",
            "loss: 1.934628  [ 3000/50000]\n",
            "loss: 2.123383  [ 6000/50000]\n",
            "loss: 2.332075  [ 9000/50000]\n",
            "loss: 1.949909  [12000/50000]\n",
            "loss: 1.824375  [15000/50000]\n",
            "loss: 1.703565  [18000/50000]\n",
            "loss: 1.783989  [21000/50000]\n",
            "loss: 1.541068  [24000/50000]\n",
            "loss: 1.972602  [27000/50000]\n",
            "loss: 1.578732  [30000/50000]\n",
            "loss: 1.762968  [33000/50000]\n",
            "loss: 1.900416  [36000/50000]\n",
            "loss: 1.694892  [39000/50000]\n",
            "loss: 1.831289  [42000/50000]\n",
            "loss: 1.310716  [45000/50000]\n",
            "loss: 2.201362  [48000/50000]\n",
            "Test Error: \n",
            " Accuracy: 39.0%, Avg loss: 1.700623 \n",
            "\n",
            "Epoch 2\n",
            "-------------------------------\n",
            "loss: 1.724574  [    0/50000]\n",
            "loss: 1.662918  [ 3000/50000]\n",
            "loss: 1.805216  [ 6000/50000]\n",
            "loss: 2.168732  [ 9000/50000]\n",
            "loss: 1.831705  [12000/50000]\n",
            "loss: 1.616933  [15000/50000]\n",
            "loss: 1.686127  [18000/50000]\n",
            "loss: 1.597243  [21000/50000]\n",
            "loss: 1.348190  [24000/50000]\n",
            "loss: 1.862394  [27000/50000]\n",
            "loss: 1.495336  [30000/50000]\n",
            "loss: 1.543347  [33000/50000]\n",
            "loss: 1.821525  [36000/50000]\n",
            "loss: 1.627017  [39000/50000]\n",
            "loss: 1.789555  [42000/50000]\n",
            "loss: 1.018696  [45000/50000]\n",
            "loss: 2.252029  [48000/50000]\n",
            "Test Error: \n",
            " Accuracy: 43.2%, Avg loss: 1.604705 \n",
            "\n",
            "Epoch 3\n",
            "-------------------------------\n",
            "loss: 1.704733  [    0/50000]\n",
            "loss: 1.753121  [ 3000/50000]\n",
            "loss: 1.817514  [ 6000/50000]\n",
            "loss: 2.066670  [ 9000/50000]\n",
            "loss: 1.681011  [12000/50000]\n",
            "loss: 1.505296  [15000/50000]\n",
            "loss: 1.555059  [18000/50000]\n",
            "loss: 1.321412  [21000/50000]\n",
            "loss: 1.365780  [24000/50000]\n",
            "loss: 1.756920  [27000/50000]\n",
            "loss: 1.422961  [30000/50000]\n",
            "loss: 1.517850  [33000/50000]\n",
            "loss: 1.807435  [36000/50000]\n",
            "loss: 1.474390  [39000/50000]\n",
            "loss: 1.675593  [42000/50000]\n",
            "loss: 0.894157  [45000/50000]\n",
            "loss: 2.216144  [48000/50000]\n",
            "Test Error: \n",
            " Accuracy: 44.7%, Avg loss: 1.557957 \n",
            "\n",
            "Epoch 4\n",
            "-------------------------------\n",
            "loss: 1.638684  [    0/50000]\n",
            "loss: 1.706029  [ 3000/50000]\n",
            "loss: 1.771008  [ 6000/50000]\n",
            "loss: 2.015679  [ 9000/50000]\n",
            "loss: 1.562069  [12000/50000]\n",
            "loss: 1.402233  [15000/50000]\n",
            "loss: 1.525320  [18000/50000]\n",
            "loss: 1.183910  [21000/50000]\n",
            "loss: 1.316459  [24000/50000]\n",
            "loss: 1.620568  [27000/50000]\n",
            "loss: 1.421597  [30000/50000]\n",
            "loss: 1.497882  [33000/50000]\n",
            "loss: 1.706364  [36000/50000]\n",
            "loss: 1.395980  [39000/50000]\n",
            "loss: 1.613327  [42000/50000]\n",
            "loss: 0.864511  [45000/50000]\n",
            "loss: 2.147175  [48000/50000]\n",
            "Test Error: \n",
            " Accuracy: 45.9%, Avg loss: 1.508001 \n",
            "\n",
            "Epoch 5\n",
            "-------------------------------\n",
            "loss: 1.591701  [    0/50000]\n",
            "loss: 1.651442  [ 3000/50000]\n",
            "loss: 1.655710  [ 6000/50000]\n",
            "loss: 1.867900  [ 9000/50000]\n",
            "loss: 1.555745  [12000/50000]\n",
            "loss: 1.308860  [15000/50000]\n",
            "loss: 1.589193  [18000/50000]\n",
            "loss: 1.207325  [21000/50000]\n",
            "loss: 1.290137  [24000/50000]\n",
            "loss: 1.638314  [27000/50000]\n",
            "loss: 1.304305  [30000/50000]\n",
            "loss: 1.449337  [33000/50000]\n",
            "loss: 1.650120  [36000/50000]\n",
            "loss: 1.399886  [39000/50000]\n",
            "loss: 1.604460  [42000/50000]\n",
            "loss: 0.825060  [45000/50000]\n",
            "loss: 2.044593  [48000/50000]\n",
            "Test Error: \n",
            " Accuracy: 46.6%, Avg loss: 1.506067 \n",
            "\n",
            "Done!\n"
          ]
        }
      ]
    }
  ]
}